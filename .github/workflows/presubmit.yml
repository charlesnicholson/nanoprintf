name: Presubmit Checks

on:
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * 0'
  workflow_dispatch:

permissions:
  packages: read

# Shared container config
x-container: &docker-container
  image: ghcr.io/charlesnicholson/docker-image:latest
  credentials:
    username: ${{ github.actor }}
    password: ${{ secrets.GITHUB_TOKEN }}

# Shared checkout step
x-checkout: &checkout
  uses: actions/checkout@v4
  with:
    submodules: recursive

jobs:
  pylint:
    runs-on: ubuntu-latest
    container: *docker-container
    steps:
      - *checkout
      - name: Pylint build.py
        run: . /work/venv/bin/activate && python -m pylint build.py tests/size_report.py

  download:
    runs-on: ubuntu-latest
    container: *docker-container
    steps:
      - *checkout
      - name: Build
        run: ./b --download --paland -v

  sanitizers:
    runs-on: ubuntu-latest
    container: *docker-container
    strategy:
      matrix:
        sanitizer: [ubsan, asan]
        architecture: [32, 64]
    steps:
      - *checkout
      - name: Build
        env:
          CC: /usr/bin/clang
          CXX: /usr/bin/clang++
        run: ./b --arch ${{ matrix.architecture }} --${{ matrix.sanitizer }} --paland -v

  linux-x64:
    runs-on: ubuntu-latest
    container: *docker-container
    strategy:
      matrix:
        compiler: [gcc, clang]
        configuration: [Debug, Release]
        architecture: [32, 64]
        include:
          - compiler: gcc
            cc: gcc
            cxx: g++
          - compiler: clang
            cc: clang
            cxx: clang++
    steps:
      - *checkout
      - name: Build
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
        run: ./b --cfg ${{ matrix.configuration }} --arch ${{ matrix.architecture }} --paland -v

  linux-arm64:
    runs-on: ubuntu-24.04-arm
    container: *docker-container
    strategy:
      matrix:
        compiler: [gcc, clang]
        configuration: [Debug, Release]
        include:
          - compiler: gcc
            cc: gcc
            cxx: g++
          - compiler: clang
            cc: clang
            cxx: clang++
    steps:
      - *checkout
      - name: Build
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
        run: ./b --cfg ${{ matrix.configuration }} --arch 64 --paland -v

  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
    steps:
      - *checkout
      - name: Set up Python 3.x
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Build
        run: ./b --cfg ${{ matrix.configuration }} --paland -v

  win:
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
        architecture: [32, 64]
    steps:
      - *checkout
      - name: Set up Python 3.x
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Build
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars${{ matrix.architecture }}.bat"
          python.exe build.py --cfg ${{ matrix.configuration }} --paland -v --arch ${{ matrix.architecture }}

  size-reports:
    runs-on: ubuntu-latest
    container: *docker-container
    strategy:
      matrix:
        include:
          - platform: cm0
            label: Cortex-M0
          - platform: cm4
            label: Cortex-M4
          - platform: host
            label: Linux x64
    steps:
      - uses: actions/checkout@v4
      - name: ${{ matrix.label }}
        shell: bash
        run: |
          . /work/venv/bin/activate
          python3 tests/size_report.py -p ${{ matrix.platform }}

  all-checks-pass:
    needs: [pylint, download, sanitizers, linux-x64, linux-arm64, macos, win, size-reports]
    runs-on: ubuntu-latest
    steps:
      - run: echo Done

