name: Presubmit Checks

on:
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 0'  # Weekly

permissions:
  packages: read

jobs:
  pylint:
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/charlesnicholson/docker-image:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2
      - name: Pylint build.py
        run: . /work/venv/bin/activate && python -m pylint build.py tests/size_report.py

  linux-gcc:
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/charlesnicholson/docker-image:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    strategy:
      matrix:
        configuration: [Debug, Release]
        architecture: ['', --build-32-bit]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Build
        env:
          CC: /usr/bin/gcc
          CXX: /usr/bin/g++
        run: ./b --cfg ${{ matrix.configuration }} ${{ matrix.architecture }} --paland -v

  linux-clang:
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/charlesnicholson/docker-image:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    strategy:
      matrix:
        configuration: [Debug, Release]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Build
        env:
          CC: /usr/bin/clang
          CXX: /usr/bin/clang++
        run: ./b --cfg ${{ matrix.configuration }} --paland -v

  macos:
    runs-on: macos-latest

    strategy:
      matrix:
        configuration: [Debug, Release]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Build
        run: ./b --cfg ${{ matrix.configuration }} --paland -v

  win:
    runs-on: windows-latest

    strategy:
      matrix:
        architecture: [32, 64]
        configuration: [Debug, Release]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Build
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars${{ matrix.architecture }}.bat"
          python.exe build.py --cfg ${{ matrix.configuration }} --paland -v

  size-reports:
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/charlesnicholson/docker-image:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2

      - name: Cortex-M0
        shell: bash
        run: |
          . /work/venv/bin/activate

          echo Minimal:
          arm-none-eabi-gcc -mcpu=cortex-m0 -mthumb -Os -x c -c -o cm0-min.o -DNANOPRINTF_IMPLEMENTATION -DNANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS=0 -DNANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS=0 -DNANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS=0 -DNANOPRINTF_USE_LARGE_FORMAT_SPECIFIERS=0 -DNANOPRINTF_USE_WRITEBACK_FORMAT_SPECIFIERS=0 - <<< '#include "nanoprintf.h"'
          arm-none-eabi-nm --print-size --size-sort cm0-min.o | python tests/size_report.py

          echo Medium:
          arm-none-eabi-gcc -mcpu=cortex-m0 -mthumb -Os -x c -c -o cm0-med.o -DNANOPRINTF_IMPLEMENTATION -DNANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS=1 -DNANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS=1 -DNANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS=0 -DNANOPRINTF_USE_LARGE_FORMAT_SPECIFIERS=0 -DNANOPRINTF_USE_WRITEBACK_FORMAT_SPECIFIERS=0 - <<< '#include "nanoprintf.h"'
          arm-none-eabi-nm --print-size --size-sort cm0-med.o | python tests/size_report.py

          echo Maximal:
          arm-none-eabi-gcc -mcpu=cortex-m0 -mthumb -Os -x c -c -o cm0-max.o -DNANOPRINTF_IMPLEMENTATION -DNANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS=1 -DNANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS=1 -DNANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS=1 -DNANOPRINTF_USE_LARGE_FORMAT_SPECIFIERS=1 -DNANOPRINTF_USE_WRITEBACK_FORMAT_SPECIFIERS=1 - <<< '#include "nanoprintf.h"'
          arm-none-eabi-nm --print-size --size-sort cm0-max.o | python tests/size_report.py

      - name: Cortex-M4
        shell: bash
        run: |
          . /work/venv/bin/activate

          echo Minimal:
          arm-none-eabi-gcc -mcpu=cortex-m4 -mthumb -Os -x c -c -o cm4-min.o -DNANOPRINTF_IMPLEMENTATION -DNANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS=0 -DNANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS=0 -DNANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS=0 -DNANOPRINTF_USE_LARGE_FORMAT_SPECIFIERS=0 -DNANOPRINTF_USE_WRITEBACK_FORMAT_SPECIFIERS=0 - <<< '#include "nanoprintf.h"'
          arm-none-eabi-nm --print-size --size-sort cm4-min.o | python tests/size_report.py

          echo Medium:
          arm-none-eabi-gcc -mcpu=cortex-m4 -mthumb -Os -x c -c -o cm4-med.o -DNANOPRINTF_IMPLEMENTATION -DNANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS=1 -DNANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS=1 -DNANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS=0 -DNANOPRINTF_USE_LARGE_FORMAT_SPECIFIERS=0 -DNANOPRINTF_USE_WRITEBACK_FORMAT_SPECIFIERS=0 - <<< '#include "nanoprintf.h"'
          arm-none-eabi-nm --print-size --size-sort cm4-med.o | python tests/size_report.py

          echo Maximal:
          arm-none-eabi-gcc -mcpu=cortex-m4 -mthumb -Os -x c -c -o cm4-max.o -DNANOPRINTF_IMPLEMENTATION -DNANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS=1 -DNANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS=1 -DNANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS=1 -DNANOPRINTF_USE_LARGE_FORMAT_SPECIFIERS=1 -DNANOPRINTF_USE_WRITEBACK_FORMAT_SPECIFIERS=1 - <<< '#include "nanoprintf.h"'
          arm-none-eabi-nm --print-size --size-sort cm4-max.o | python tests/size_report.py

      - name: x64
        shell: bash
        run: |
          . /work/venv/bin/activate

          echo Minimal:
          gcc -Os -x c -c -o x64-min.o -DNANOPRINTF_IMPLEMENTATION -DNANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS=0 -DNANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS=0 -DNANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS=0 -DNANOPRINTF_USE_LARGE_FORMAT_SPECIFIERS=0 -DNANOPRINTF_USE_WRITEBACK_FORMAT_SPECIFIERS=0 - <<< '#include "nanoprintf.h"'
          nm --print-size --size-sort x64-min.o | python tests/size_report.py

          echo Medium:
          gcc -Os -x c -c -o x64-med.o -DNANOPRINTF_IMPLEMENTATION -DNANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS=1 -DNANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS=1 -DNANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS=0 -DNANOPRINTF_USE_LARGE_FORMAT_SPECIFIERS=0 -DNANOPRINTF_USE_WRITEBACK_FORMAT_SPECIFIERS=0 - <<< '#include "nanoprintf.h"'
          nm --print-size --size-sort x64-med.o | python tests/size_report.py

          echo Maximal:
          gcc -Os -x c -c -o x64-max.o -DNANOPRINTF_IMPLEMENTATION -DNANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS=1 -DNANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS=1 -DNANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS=1 -DNANOPRINTF_USE_LARGE_FORMAT_SPECIFIERS=1 -DNANOPRINTF_USE_WRITEBACK_FORMAT_SPECIFIERS=1 - <<< '#include "nanoprintf.h"'
          nm --print-size --size-sort x64-max.o | python tests/size_report.py
